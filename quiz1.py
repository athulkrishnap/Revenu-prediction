# -*- coding: utf-8 -*-
"""Quiz1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Lc2U2f5S6fs7fBoM8TII4QCGkSxBz6nt
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn import datasets

# prompt: import this data set /content/Athul Krishna P - revolutioncart_data.csv

import pandas as pd
df = pd.read_csv('/content/Athul Krishna P - revolutioncart_data.csv')

df

# prompt: split this data into  y=monthly_revenue and x = rest

y = df['monthly_revenue']
X = df.drop('monthly_revenue', axis=1)

# prompt: split the x and y into test and train

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# prompt: make ridge regression model on x train and y train

from sklearn.linear_model import Ridge

# Create a Ridge Regression model
ridge_model = Ridge(alpha=1.0)  # You can adjust the alpha parameter

# Train the model on the training data
ridge_model.fit(X_train, y_train)

# prompt: print the intercept,  coeffiecnt and also accuracy by rsquare method

from sklearn.metrics import r2_score

# Make predictions on the test data
y_pred = ridge_model.predict(X_test)

# Print the intercept and coefficients
print("Intercept:", ridge_model.intercept_)
print("Coefficients:", ridge_model.coef_)

# Calculate R-squared
r2 = r2_score(y_test, y_pred)
print("R-squared:", r2)

# prompt: perform cross validation

from sklearn.model_selection import cross_val_score

# Perform cross-validation (e.g., 5-fold)
cv_scores = cross_val_score(ridge_model, X, y, cv=5)

# Print the cross-validation scores
print("Cross-validation scores:", cv_scores)

# Print the mean and standard deviation of the scores
print("Mean CV score:", cv_scores.mean())
print("Std CV score:", cv_scores.std())

# prompt: dump the model

import pickle

# Save the model to a file
filename = 'ridge_model.pkl'
pickle.dump(ridge_model, open(filename, 'wb'))

# prompt: make app with streamlit with ridge model

!pip install streamlit

# Commented out IPython magic to ensure Python compatibility.
# # prompt: make app with streamlit with ridge model generate the python codes
# 
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# import pickle
# 
# # Load the trained Ridge model
# filename = 'ridge_model.pkl'
# loaded_model = pickle.load(open(filename, 'rb'))
# 
# # Create a title for your app
# st.title("Monthly Revenue Prediction App")
# 
# # Create input fields for user data
# st.header("Enter Customer Data:")
# total_orders = st.number_input("Total Orders:")
# avg_order_value = st.number_input("Average Order Value:")
# customer_lifetime_value = st.number_input("Customer Lifetime Value:")
# average_order_frequency = st.number_input("Average Order Frequency:")
# days_since_last_order = st.number_input("Days Since Last Order:")
# 
# # Create a button to trigger prediction
# if st.button("Predict Monthly Revenue"):
#     # Create a DataFrame with the user's input
#     input_data = pd.DataFrame({
#         'total_orders': [total_orders],
#         'avg_order_value': [avg_order_value],
#         'customer_lifetime_value': [customer_lifetime_value],
#         'average_order_frequency': [average_order_frequency],
#         'days_since_last_order': [days_since_last_order]
#     })
# 
#     # Make a prediction using the loaded model
#     prediction = loaded_model.predict(input_data)[0]
# 
#     # Display the prediction
#     st.header("Predicted Monthly Revenue:")
#     st.write(f"${prediction:.2f}")
#

# prompt: make elasticneton x train and y train

from sklearn.linear_model import ElasticNet

# Create an ElasticNet Regression model
elasticnet_model = ElasticNet(alpha=1.0, l1_ratio=0.5)  # You can adjust alpha and l1_ratio

# Train the model on the training data
elasticnet_model.fit(X_train, y_train)

# prompt: check accuracy of elasticnet

# Make predictions on the test data
y_pred_elasticnet = elasticnet_model.predict(X_test)

# Calculate R-squared for ElasticNet
r2_elasticnet = r2_score(y_test, y_pred_elasticnet)
print("ElasticNet R-squared:", r2_elasticnet)

# Perform cross-validation for ElasticNet
cv_scores_elasticnet = cross_val_score(elasticnet_model, X, y, cv=5)

# Print the cross-validation scores for ElasticNet
print("ElasticNet Cross-validation scores:", cv_scores_elasticnet)

# Print the mean and standard deviation of the scores for ElasticNet
print("ElasticNet Mean CV score:", cv_scores_elasticnet.mean())
print("ElasticNet Std CV score:", cv_scores_elasticnet.std())

# prompt: cross validation

# Perform cross-validation (e.g., 5-fold) for Ridge model
cv_scores_ridge = cross_val_score(ridge_model, X, y, cv=5)

# Print the cross-validation scores for Ridge model
print("Ridge Cross-validation scores:", cv_scores_ridge)

# Print the mean and standard deviation of the scores for Ridge model
print("Ridge Mean CV score:", cv_scores_ridge.mean())
print("Ridge Std CV score:", cv_scores_ridge.std())

# Perform cross-validation (e.g., 5-fold) for ElasticNet model
cv_scores_elasticnet = cross_val_score(elasticnet_model, X, y, cv=5)

# Print the cross-validation scores for ElasticNet model
print("ElasticNet Cross-validation scores:", cv_scores_elasticnet)

# Print the mean and standard deviation of the scores for ElasticNet model
print("ElasticNet Mean CV score:", cv_scores_elasticnet.mean())
print("ElasticNet Std CV score:", cv_scores_elasticnet.std())

# prompt: make lasso model x train and y train, check accuracy and do cross validation

from sklearn.linear_model import Lasso
from sklearn.metrics import r2_score
from sklearn.model_selection import cross_val_score

# Create a Lasso Regression model
lasso_model = Lasso(alpha=1.0)  # You can adjust the alpha parameter

# Train the model on the training data
lasso_model.fit(X_train, y_train)

# Make predictions on the test data
y_pred_lasso = lasso_model.predict(X_test)

# Calculate R-squared for Lasso
r2_lasso = r2_score(y_test, y_pred_lasso)
print("Lasso R-squared:", r2_lasso)

# Perform cross-validation for Lasso
cv_scores_lasso = cross_val_score(lasso_model, X, y, cv=5)

# Print the cross-validation scores for Lasso
print("Lasso Cross-validation scores:", cv_scores_lasso)

# Print the mean and standard deviation of the scores for Lasso
print("Lasso Mean CV score:", cv_scores_lasso.mean())
print("Lasso Std CV score:", cv_scores_lasso.std())

# prompt: make linear regression model x train and y train, check accuracy and do cross validation

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Create a Linear Regression model
linear_model = LinearRegression()

# Train the model on the training data
linear_model.fit(X_train, y_train)

# Make predictions on the test data
y_pred_linear = linear_model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred_linear)
r2 = r2_score(y_test, y_pred_linear)

print("Linear Regression Mean Squared Error:", mse)
print("Linear Regression R-squared:", r2)

# Perform cross-validation for Linear Regression
cv_scores_linear = cross_val_score(linear_model, X, y, cv=5)

# Print the cross-validation scores for Linear Regression
print("Linear Regression Cross-validation scores:", cv_scores_linear)

# Print the mean and standard deviation of the scores for Linear Regression
print("Linear Regression Mean CV score:", cv_scores_linear.mean())
print("Linear Regression Std CV score:", cv_scores_linear.std())

# prompt: dump the lasso model

# Save the Lasso model to a file
filename_lasso = 'lasso_model.pkl'
pickle.dump(lasso_model, open(filename_lasso, 'wb'))

# prompt: make support vector regression model x train and y train, check accuracy and do cross validation

from sklearn.svm import SVR
from sklearn.model_selection import cross_val_score
from sklearn.metrics import r2_score

# Create an SVR model
svr_model = SVR(kernel='linear')  # You can choose different kernels (e.g., 'rbf', 'poly')

# Train the model on the training data
svr_model.fit(X_train, y_train)

# Make predictions on the test data
y_pred_svr = svr_model.predict(X_test)

# Calculate R-squared for SVR
r2_svr = r2_score(y_test, y_pred_svr)
print("SVR R-squared:", r2_svr)

# Perform cross-validation for SVR
cv_scores_svr = cross_val_score(svr_model, X, y, cv=5)

# Print the cross-validation scores for SVR
print("SVR Cross-validation scores:", cv_scores_svr)

# Print the mean and standard deviation of the scores for SVR
print("SVR Mean CV score:", cv_scores_svr.mean())
print("SVR Std CV score:", cv_scores_svr.std())

# prompt: make adaboost regression  mmodel x train and y train, check accuracy and do cross validation

from sklearn.ensemble import AdaBoostRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import cross_val_score


# Create an AdaBoost Regression model
adaboost_model = AdaBoostRegressor(
    DecisionTreeRegressor(max_depth=4), n_estimators=50, random_state=42
)

# Train the model on the training data
adaboost_model.fit(X_train, y_train)

# Make predictions on the test data
y_pred_adaboost = adaboost_model.predict(X_test)

# Calculate R-squared for AdaBoost
r2_adaboost = r2_score(y_test, y_pred_adaboost)
print("AdaBoost R-squared:", r2_adaboost)

# Perform cross-validation for AdaBoost
cv_scores_adaboost = cross_val_score(adaboost_model, X, y, cv=5)

# Print the cross-validation scores for AdaBoost
print("AdaBoost Cross-validation scores:", cv_scores_adaboost)

# Print the mean and standard deviation of the scores for AdaBoost
print("AdaBoost Mean CV score:", cv_scores_adaboost.mean())
print("AdaBoost Std CV score:", cv_scores_adaboost.std())